Dynamic Programming Implementations

====================================
1) Word Break
Given a string s and a dictionary of strings wordDict, return true if s can be segmented into a space-separated sequence of one or more dictionary words.
***Note that the same word in the dictionary may be reused multiple times in the segmentation.****
---------------------------------------------------------------------------------------------------------------------------------------------------------
Python Implementation
---------------------
class Solution(object):
    def wordBreak(self, s, wordDict):
        # each representing a character in s. That way previous calculations can be cached
        dp = [False] * (len(s) + 1)
        
        # base case; if a word in wordDict can bring us to the end of the string, its valid
        dp[len(s)] = True
        
        # from each character  s[i] ----> s[s.size() - 1], starting in reverse
        for i in range(len(s) -1, -1, -1):
        
            # check if the rest of the characters in s exist as words in wordDict
            for word in wordDict:
            
                # if there are enough characters left in s to contain a word from wordDict and substring matches a word 
                # in wordDict
                if (i + len(word)) <= len(s) and s[i:i+len(word)] == word:
                    dp[i] = dp[i + len(word)]
                    
                # if the substring is valid from this position, no need to keep validating
                if dp[i]:
                    break
        return dp[0]


==============================================================================================================================
2) House Robber
You are a professional robber planning to rob houses along a street. Each house has a certain amount of money stashed, the only constraint stopping you from robbing
each of them is that adjacent houses have security systems connected and it will automatically contact the police if two adjacent houses were broken into on the same
night.

Given an integer array nums representing the amount of money of each house, return the maximum amount of money you can rob tonight without alerting the police.
--------------------------------------------------------------------------------------------------------------------------------------------------------------------
Python Implementation
---------------------
class Solution(object):
    def rob(self, nums):
        house1, house2 = 0, 0
        # [house1, house2, n, n+1, n+2, ....]
        for n in nums:
            # recurrence relationship; in any 3 elements in the list, you can either rob 1 & 3 or rob just 2
            temp = max(house1 + n, house2)
            # we advance our variables to the next house to continue along the street
            house1 = house2
            house2 = temp
        return temp
  
  C++ Implementation
  -------------------
  class Solution{
public:
	int rob(vector<int>& nums) {
		int house1 = 0;
		int house2 = 0;
		int temp = 0;

		// [house1, house2, n, n+1, n+2, ....]
		for(int i = 0; i < nums.size(); i++){
			// recurrence relationship; in any 3 elements in the list, you can either rob 1 & 3 or rob just 2
			temp = max(house1 + nums[i], house2);
			house1 = house2;
			house2 = temp;
		}
		return temp;

	}
};
=========================================================================================================================
3) Climbing Stairs
You are climbing a staircase. It takes n steps to reach the top.

Each time you can either climb 1 or 2 steps. In how many distinct ways can you climb to the top?
------------------------------------------------------------------------------------------------
Python Solution
---------------
class Solution(object):
    def climbStairs(self, n):
      # algorithm doesnt work for staircases < 3 steps, return numWays
        if n <= 2:
            return n
        dp = [0] * (n + 1)
	
      # base cases for dp algorithm
        dp[1], dp[2] = 1, 2
	
      # recursive relationship: numWays for nth step: (numWays for the (n-2)th step) + (numWays for the n-1)th step)
        for i in range(3, n + 1):
            dp[i] = dp[i - 1] + dp[i - 2]
        return dp[n]

C++ Solution
-------------
class Solution {
public:
    int climbStairs(int n) {
        vector<int> dp(n + 1);

        // algorithm doesnt work for staircases < 3 steps, return numWays
        if(n <= 2){
        	return n;
        }

        // base cases for dp algorithm
        // recursive relationship: numWays for nth step: (numWays for the (n-2)th step) + (numWays for the n-1)th step)
        dp[1] = 1;
        dp[2] = 2;

        for (int i = 3; i <= n; i++){
        	dp[i] = dp[i-2] + dp[i -1];
        }

        return dp[n];
    }
};
=================================================================================================================
3) Min Cost Climbing Stairs
You are given an integer array cost where cost[i] is the cost of ith step on a staircase. Once you pay the cost, you can either climb one or two steps.

You can either start from the step with index 0, or the step with index 1.

Return the minimum cost to reach the top of the floor. ***** the top floor is size of cost + 1 [the last step is the last element in the array] *****
----------------------------------------------------------------------------------------------------------------------------------
Python Implementation
---------------------
class Solution(object):
    def minCostClimbingStairs(self,cost):
        # the only step will contain the minimum cost
        if len(cost) == 1:
            return cost[0]
        # the minimum step is either the first or the second step
        if len(cost) == 2:
            return min(cost[0], cost[1])
        # len(cost) + 1 to represent the staircase including the top
        dp = [0] * (len(cost) + 1)
	
	# from here we will do a top-down approach to find the minimum price to reach the top from each step starting in reverse
	#recursive relationship : dp[i] = min(cost[i] + dp[i + 1], cost[i] + dp[i + 2])
        dp[len(cost)] = 0
        dp[len(cost) -1] = cost[len(cost) -1]
	
        for i in range(len(cost) - 2, -1, -1):
            # deciding whether its more economical to jump 1 or 2 steps
            dp[i] = min(cost[i] + dp[i + 1], cost[i] + dp[i + 2])
	    
        # it's possible that its cheaper to start from the second step, so ret the minimum of 1st and 2nd steps
        return min(dp[0],dp[1])
	
C++ Implementation
------------------
class Solution {
public:
	int minCostClimbingStairs(vector<int>& cost){
		//the only step will contain the minimum cost
		if(cost.size() == 1){
			return cost[0];
		}
		
		// the minimum step is either the first or the second step
		if(cost.size() == 2){
			return min(cost[0], cost[1]);
		}
		
		// cost.size() + 1 to represent the staircase including the top
		vector<int> dp(cost.size() + 1);
		
		// from here we will do a top-down approach to find the minimum price to reach the top from each step starting in reverse
		// recursive relationship : dp[i] = min(cost[i] + dp[i + 1], cost[i] + dp[i + 2])
		dp[cost.size()] = 0;
		dp[cost.size() -1] = cost[cost.size() - 1];
		
		for(int i = cost.size() - 2; i >= 0; i--){
			dp[i] = min(cost[i] + dp[i + 1], cost[i] + dp[i + 2]);
		}
		
		// it's possible that its cheaper to start from the second step, so ret the minimum of 1st and 2nd steps
		return min(dp[0], dp[1]);
	}
};



=================================================================================================================
4) House Robber II
You are a professional robber planning to rob houses along a street. Each house has a certain amount of money stashed. All houses at this place are arranged in a 
circle. That means the first house is the neighbor of the last one. Meanwhile, adjacent houses have a security system connected, and it will automatically contact
the police if two adjacent houses were broken into on the same night.

Given an integer array nums representing the amount of money of each house, return the maximum amount of money you can rob tonight without alerting the police.
----------------------------------------------------------------------------------------------------------------------------------
Python Implementation
---------------------

  
