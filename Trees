# Tree manipulation and traveral implementations
==================================================
1) Invert Binary Tree
Given the root of a binary tree, invert the tree, and return its root.
----------------------------------------------------------------------
Python Implementation
----------------------
 class TreeNode(object):
     def __init__(self, val=0, left=None, right=None):
         self.val = val
         self.left = left
         self.right = right

class Solution(object):
    def invertTree(self, root):
        if not root:
            return
        # exchange the children
        temp = root.left
        root.left = root.right
        root.right = temp

        self.invertTree(root.left)
        self.invertTree(root.right)
-----------------------------------------------------
C++ Implementation
-------------------
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    TreeNode* invertTree(TreeNode* root) {
    	TreeNode* temp = NULL;
    	if(!root){
    		return NULL;
    	}
    	
    	// exchange children
    	temp = root->left;
    	root->left = root->right;
    	root->right = temp;

    	invertTree(root->left);
    	invertTree(root->right);
    	
    	return root;
    }
};
==============================================================================================
2) Same Tree
Given the roots of two binary trees p and q, write a function to check if they are the same or not.

Two binary trees are considered the same if they are structurally identical, and the nodes have the same value.
-----------------------------------------------------------------------------------------------------------
Python Implementation
---------------------
# Definition for a binary tree node.
# class TreeNode(object):
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution(object):
    def isSameTree(self, p, q):
        if not p and not q:
            return True
        if not p or not q or p.val != q.val:
            return False
        return (self.isSameTree(p.left, q.left) and self.isSameTree(p.right, q.right))
 
 C++ Implementation
 ------------------
 class Solution {
public:
    bool isSameTree(TreeNode* p, TreeNode* q) {
        if(!p and !q){
        	return true;
        }
        if(!p or !q or (p->val != q->val)){
        	return false;
        }
        return (isSameTree(p->left, q->left) and isSameTree(p->right, q->right));
    }
};
==========================================================================================
3) Subtree of Another Tree
Given the roots of two binary trees root and subRoot, return true if there is a subtree of root with the same structure and node values of subRoot and false otherwise.

A subtree of a binary tree tree is a tree that consists of a node in tree and all of this node's descendants. The tree tree could also be considered as a subtree 
of itself.
-------------------------------------------------------------------------------------------------------------------

Python Implementation
---------------------
class TreeNode(object):
    self.val = val
    self.left = left
    self.right = right

class Solution(object):
    def isSubtree(self, root, subRoot):
        # if the node is empty
        if not root:
            print("not root")
            return False
        if root.val == subRoot.val and self.compareTree(root,subRoot):
            return True
        return self.isSubtree(root.left, subRoot) or self.isSubtree(root.right, subRoot)


    def compareTree(self, root1, root2):
            # if both nodes dont exist then still congruent
            if not root1 and not root2:
                print("root1 but not root2")
                return True
            # if one node exists and the other doesnt
            if (root1 and not root2) or (root2 and not root1):
                print("one node exists and the other doesnt")
                return False
            if root1.val != root2.val:
                print("root1.val != root2.val")
                return False
            # if further left node and right nodes match
            return self.compareTree(root1.left, root2.left) and self.compareTree(root1.right, root2.right)
  
  C++ Solution
  -----------
  
  Definition for a binary tree node.
  struct TreeNode {
      int val;
      TreeNode *left;
      TreeNode *right;
      TreeNode() : val(0), left(nullptr), right(nullptr) {}
     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
      TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
  };
  
class Solution {
public:
    bool isSubtree(TreeNode* root, TreeNode* subRoot) {
        // if the tree is empty
    	if(!root){
        	return false;
        }

    	// if root and child values are all congruent
        if(this->compareTree(root, subRoot)){
        	return true;
        }
       // continue to check if any subTree matches
        return (this->isSubtree(root->left, subRoot)) || (this->isSubtree(root->right, subRoot));

    }

    bool compareTree(TreeNode* r1, TreeNode* r2){
      	// we have reached the bottom of the tree successfully, equivalent subtree found
        	if(!r1 and !r2){
        		return true;
        	}
        	
        	if(!r1 or !r2){
        		return false;
        	}
        	if(r1->val != r2->val){
        		return false;
        	}
            
            // continue to check if all children are identical to the desired subRoots
        	return (r1->val == r2->val) && (this->compareTree(r1->left, r2->left) && this->compareTree(r1->right, r2->right));
    }
};

======================================================================================================
4) Binary Tree Level Order Traversal
Given the root of a binary tree, return the level order traversal of its nodes' values. (i.e., from left to right, level by level).
-----------------------------------------------------------------------------------------------------------------

Python Implementaion
--------------------
class Solution(object):
    def levelOrder(self, root):
        # contains a list for each level containing nodes at each level
        results = []

        if not root:
            return results
        # BFS
        q = deque()
        q.append(root)
        while q:
            level = []
            # for each node on this level
            for i in range(len(q)):
                node = q.popleft()
                if node.left:
                    q.append(node.left)

                if node.right:
                    q.append(node.right)
                # add node to this level's list
                level.append(node.val)
            # add the completed level to the list
            results.append(level)
        return results
	
	C++ Implementation
	------------------
class Solution {
public:
    vector<vector<int>> levelOrder(TreeNode* root) {
    	TreeNode* temp;
    	// contains a list for each level containing nodes at each level
    	vector<vector<int>> results;
    	vector<int> level;
    	queue<TreeNode*> q;
    	int len  = 0;

    	if(!root){
    		return results;
    	}

    	// BFS
    	q.emplace(root);
    	while(!q.empty()){
    		len = q.size();
    		level.clear();
    		for(int i = 0; i < len; i++){
    			temp = q.front();
    			q.pop();
    			//add node to this level's list
    			level.push_back(temp->val);

    			if(temp->left){
    			   q.emplace(temp->left);
    			}
    			if(temp->right){
    			   q.emplace(temp->right);
    			}
    		}
    		// add the completed level to the list
    		results.push_back(level);

    	}
    	return results;
    }
};
=================================================================================

