# BFS Implementation

# Using BFS to find the depth of a Binary Search Tree in Python and C++
-------------------------------------------------------------------------
# Python Implementation
-------------------------------------------------------------------------
# Definition for a binary tree node.
 class TreeNode(object):
     def __init__(self, val=0, left=None, right=None):
         self.val = val
         self.left = left
         self.right = right
         
class Solution(object):
    def maxDepth(self, root):
        #if the tree is empty
        if not root:
            return 0
        
        q = deque()
        
        q.append(root)
        depth = 0
        while q:
            for _ in range(len(q)):
                node = q.popleft()
                if node.left:
                    q.append(node.left)
            
                if node.right:
                    q.append(node.right)
            
            depth += 1
        return depth
 --------------------------------------------
 # C++ Implementation
 ---------------------------------------------
 
 //Definition for a binary tree node.
      struct TreeNode {
          int val;
          TreeNode *left;
          TreeNode *right;
          TreeNode() : val(0), left(nullptr), right(nullptr) {}
          TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
          TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
     };

 
 class Solution {
public:
    int maxDepth(TreeNode* root) {
         if(root == NULL){
		return 0;
	}
	int leftSub = maxDepth(root->left);
	int rightSub = maxDepth(root->right);

	return max(leftSub,rightSub) + 1;
    }
};
 
