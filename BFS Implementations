# BFS Implementations
==============================================
1) Using BFS to find the depth of a Binary Search Tree in Python and C++
-------------------------------------------------------------------------
# Python Implementation
-------------------------------------------------------------------------
# Definition for a binary tree node.
 class TreeNode(object):
     def __init__(self, val=0, left=None, right=None):
         self.val = val
         self.left = left
         self.right = right
         
class Solution(object):
    def maxDepth(self, root):
        #if the tree is empty
        if not root:
            return 0
        
        q = deque()
        
        q.append(root)
        depth = 0
        while q:
            for _ in range(len(q)):
                node = q.popleft()
                if node.left:
                    q.append(node.left)
            
                if node.right:
                    q.append(node.right)
            
            depth += 1
        return depth

 # C++ Implementation
 ---------------------------------------------
 
 //Definition for a binary tree node.
      struct TreeNode {
          int val;
          TreeNode *left;
          TreeNode *right;
          TreeNode() : val(0), left(nullptr), right(nullptr) {}
          TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
          TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
     };

 
 class Solution {
public:
    int maxDepth(TreeNode* root) {
         if(root == NULL){
		return 0;
	}
	int leftSub = maxDepth(root->left);
	int rightSub = maxDepth(root->right);

	return max(leftSub,rightSub) + 1;
    }
};
======================================================================================================
2) Binary Tree Level Order Traversal
Given the root of a binary tree, return the level order traversal of its nodes' values. (i.e., from left to right, level by level).
-----------------------------------------------------------------------------------------------------------------

Python Implementaion
--------------------
class Solution(object):
    def levelOrder(self, root):
        # contains a list for each level containing nodes at each level
        results = []

        if not root:
            return results
        # BFS
        q = deque()
        q.append(root)
        while q:
            level = []
            # for each node on this level
            for i in range(len(q)):
                node = q.popleft()
                if node.left:
                    q.append(node.left)

                if node.right:
                    q.append(node.right)
                # add node to this level's list
                level.append(node.val)
            # add the completed level to the list
            results.append(level)
        return results
	
	C++ Implementation
	------------------
class Solution {
public:
    vector<vector<int>> levelOrder(TreeNode* root) {
    	TreeNode* temp;
    	// contains a list for each level containing nodes at each level
    	vector<vector<int>> results;
    	vector<int> level;
    	queue<TreeNode*> q;
    	int len  = 0;

    	if(!root){
    		return results;
    	}

    	// BFS
    	q.emplace(root);
    	while(!q.empty()){
    		len = q.size();
    		level.clear();
    		for(int i = 0; i < len; i++){
    			temp = q.front();
    			q.pop();
    			//add node to this level's list
    			level.push_back(temp->val);

    			if(temp->left){
    			   q.emplace(temp->left);
    			}
    			if(temp->right){
    			   q.emplace(temp->right);
    			}
    		}
    		// add the completed level to the list
    		results.push_back(level);

    	}
    	return results;
    }
};
=================================================================================
