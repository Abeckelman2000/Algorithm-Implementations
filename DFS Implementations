DFS
===========================================================================
1) Binary Tree Inorder Traversal
------------------------------
Python Implementation
---------------------
# Definition for a binary tree node.
 class TreeNode(object):
     def __init__(self, val=0, left=None, right=None):
         self.val = val
         self.left = left
         self.right = right
         
class Solution(object):
    def inorderTraversal(self, root):
        returnList = []
        def dfs(root):
            if root:
                dfs(root.left)
                returnList.append(root.val)
                dfs(root.right)
        dfs(root)
        return returnList
        
 --------------------------------------------
 C++ Implementation
 ------------------
 // Definition for a binary tree node.
  struct TreeNode {
      int val;
      TreeNode *left;
      TreeNode *right;
      TreeNode() : val(0), left(nullptr), right(nullptr) {}
      TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
      TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
  };
  
class Solution {
public:
    vector<int> vectorName;
    vector<int> inorderTraversal(TreeNode* root) {
        if(root){
            inorderTraversal(root->left);
            vectorName.push_back(root->val);
            inorderTraversal(root->right);
        }
     return vectorName;
    }
};
==========================================================================





2) Invert Binary Tree
Given the root of a binary tree, invert the tree, and return its root.
----------------------------------------------------------------------
Python Implementation
----------------------
 class TreeNode(object):
     def __init__(self, val=0, left=None, right=None):
         self.val = val
         self.left = left
         self.right = right

class Solution(object):
    def invertTree(self, root):
        if not root:
            return
        # exchange the children
        temp = root.left
        root.left = root.right
        root.right = temp

        self.invertTree(root.left)
        self.invertTree(root.right)
-----------------------------------------------------
C++ Implementation
-------------------
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    TreeNode* invertTree(TreeNode* root) {
    	TreeNode* temp = NULL;
    	if(!root){
    		return NULL;
    	}
    	
    	// exchange children
    	temp = root->left;
    	root->left = root->right;
    	root->right = temp;

    	invertTree(root->left);
    	invertTree(root->right);
    	
    	return root;
    }
};
==============================================================================================



3) Validate Binary Search Tree
Given the root of a binary tree, determine if it is a valid binary search tree (BST).
----------------------------------------------------------------------------------

Python Implementation
----------------------
# Definition for a binary tree node.
 class TreeNode(object):
     def __init__(self, val=0, left=None, right=None):
         self.val = val
         self.left = left
         self.right = right

class Solution(object):
    def isValidBST(self, root):

        def valid(leftbound, node, rightbound):
            # if node doesnt exist, its technically valid
            if not node:
                return True
            # if the value is outside of range, return False
            if node.val <= leftbound or node.val >= rightbound:
                return False

            # continuing down the tree
            return valid(leftbound, node.left, node.val) and valid(node.val, node.right, rightbound)
        # initial accepted range [-inf, inf]
        return valid(float('-inf'), root, float('inf'))
        
  C++ Implementation
  -----------------
  


