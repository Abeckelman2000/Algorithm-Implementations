DFS
===========================================================================
Binary Tree Inorder Traversal
------------------------------
Python Implementation
---------------------
# Definition for a binary tree node.
 class TreeNode(object):
     def __init__(self, val=0, left=None, right=None):
         self.val = val
         self.left = left
         self.right = right
         
class Solution(object):
    def inorderTraversal(self, root):
        returnList = []
        def dfs(root):
            if root:
                dfs(root.left)
                returnList.append(root.val)
                dfs(root.right)
        dfs(root)
        return returnList
        
 --------------------------------------------
 C++ Implementation
 ------------------
 // Definition for a binary tree node.
  struct TreeNode {
      int val;
      TreeNode *left;
      TreeNode *right;
      TreeNode() : val(0), left(nullptr), right(nullptr) {}
      TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
      TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
  };
  
class Solution {
public:
    vector<int> vectorName;
    vector<int> inorderTraversal(TreeNode* root) {
        if(root){
            inorderTraversal(root->left);
            vectorName.push_back(root->val);
            inorderTraversal(root->right);
        }
     return vectorName;
    }
};
==========================================================================
